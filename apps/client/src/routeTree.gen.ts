/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WorkspaceIdIndexImport } from './routes/$workspaceId/index'
import { Route as WorkspaceIdTokenImport } from './routes/$workspaceId/token'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspaceIdIndexRoute = WorkspaceIdIndexImport.update({
  id: '/$workspaceId/',
  path: '/$workspaceId/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspaceIdTokenRoute = WorkspaceIdTokenImport.update({
  id: '/$workspaceId/token',
  path: '/$workspaceId/token',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$workspaceId/token': {
      id: '/$workspaceId/token'
      path: '/$workspaceId/token'
      fullPath: '/$workspaceId/token'
      preLoaderRoute: typeof WorkspaceIdTokenImport
      parentRoute: typeof rootRoute
    }
    '/$workspaceId/': {
      id: '/$workspaceId/'
      path: '/$workspaceId'
      fullPath: '/$workspaceId'
      preLoaderRoute: typeof WorkspaceIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$workspaceId/token': typeof WorkspaceIdTokenRoute
  '/$workspaceId': typeof WorkspaceIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$workspaceId/token': typeof WorkspaceIdTokenRoute
  '/$workspaceId': typeof WorkspaceIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$workspaceId/token': typeof WorkspaceIdTokenRoute
  '/$workspaceId/': typeof WorkspaceIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$workspaceId/token' | '/$workspaceId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$workspaceId/token' | '/$workspaceId'
  id: '__root__' | '/' | '/$workspaceId/token' | '/$workspaceId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspaceIdTokenRoute: typeof WorkspaceIdTokenRoute
  WorkspaceIdIndexRoute: typeof WorkspaceIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspaceIdTokenRoute: WorkspaceIdTokenRoute,
  WorkspaceIdIndexRoute: WorkspaceIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$workspaceId/token",
        "/$workspaceId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$workspaceId/token": {
      "filePath": "$workspaceId/token.tsx"
    },
    "/$workspaceId/": {
      "filePath": "$workspaceId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
